import { useState } from "react";

import type { NextPage } from "next";
import Head from "next/head";
import {
  Container,
  Grid,
  Typography,
  Button,
  Drawer,
  IconButton,
  Paper,
} from "@mui/material";
import { useQueryClient, useQuery, useMutation } from "react-query";
import { Delete, Edit } from "@mui/icons-material";
import {
  DataGrid,
  GridRenderCellParams,
  GridValueGetterParams,
  GridColDef,
} from "@mui/x-data-grid";

import Popconfirm from "@/components/Popconfirm";
import ServiceForm from "@/components/Services/ServiceForm";

import { getServices, deleteService } from "api";
import { LENGTH, TYPES_OF_SERVICE } from "lib/constants";
import { Service } from "lib/types";
import styles from "./styles.module.scss";

const Services: NextPage = () => {
  const [showForm, setShowForm] = useState(false);
  const [editService, setEditService] = useState<Service | null>(null);

  const queryClient = useQueryClient();
  const { data: response } = useQuery("services", getServices);
  const items = response?.data;

  console.log(items);

  const { mutate: handleDelete } = useMutation(
    (id: number) => deleteService(id),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(["services"]);
      },
    }
  );

  const columns: GridColDef[] = [
    {
      field: "name",
      flex: 1,
      headerName: "Ime",
      valueGetter: (params: GridValueGetterParams<Service, Service>) => {
        return TYPES_OF_SERVICE[params.row.name];
      },
      minWidth: 120,
    },
    {
      field: "length",
      flex: 1,
      headerName: "Du≈æina",
      valueGetter: (params: GridValueGetterParams<Service, Service>) => {
        return LENGTH[params.row.length];
      },
      minWidth: 140,
    },
    {
      field: "price",
      flex: 1,
      minWidth: 180,
      headerName: "Cena",
    },
    {
      field: "actions",
      headerName: "Akcije",
      sortable: false,
      disableColumnMenu: true,
      width: 120,
      renderCell: (params: GridRenderCellParams<Service, Service>) => {
        return (
          <span>
            <IconButton
              size="small"
              onClick={() => {
                setEditService(params.row);
                setShowForm(true);
              }}
            >
              <Edit />
            </IconButton>
            <Popconfirm onConfirm={() => handleDelete(params.row.id)}>
              <IconButton size="small">
                <Delete />
              </IconButton>
            </Popconfirm>
          </span>
        );
      },
    },
  ];

  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>Usluge</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <Container>
            <Grid
              container
              sx={{ justifyContent: "space-between", mb: 2, mt: 3 }}
            >
              <Grid item>
                <Typography variant="h4">Usluge</Typography>
              </Grid>
              <Grid item>
                <Button variant="contained" onClick={() => setShowForm(true)}>
                  Dodaj uslugu
                </Button>
              </Grid>
            </Grid>
            {items && (
              <Paper>
                <DataGrid
                  autoHeight
                  disableSelectionOnClick
                  columns={columns}
                  rows={items}
                />
              </Paper>
            )}
          </Container>
        </main>
      </div>

      <Drawer
        anchor="right"
        open={showForm}
        classes={{ paper: styles.drawer }}
        onClose={() => {
          setEditService(null);
          setShowForm(false);
        }}
      >
        <ServiceForm
          editService={editService}
          onSuccess={() => {
            setEditService(null);
            setShowForm(false);
          }}
        />
      </Drawer>
    </>
  );
};

export default Services;
