import { useCallback, useState } from "react";

import type { NextPage } from "next";
import { isEmpty } from "lodash";
import Head from "next/head";
import { Grid, Drawer, Paper, Typography } from "@mui/material";
import { useQueryClient, useQuery } from "react-query";

import MaterialForm from "@/components/Materials/MaterialForm";
import ReportTable from "@/components/Report/ReportTable";
import Header from "@/components/Report/Header";
import Summary from "@/components/Report/Summary";
import EmptyState from "@/components/Report/EmptyState";

import { getFinalizedServices, getUsedMaterials, deleteMaterial } from "api";
import styles from "./styles.module.scss";
import { useRecoilState, useRecoilValue } from "recoil";
import { workerState, editState, dateState } from "@/components/Report/state";
import { Box } from "@mui/system";
import { UsedMaterial } from "lib/types";

const Report: NextPage = () => {
  const queryClient = useQueryClient();
  const [showForm, setShowForm] = useState(false);
  const [editMaterial, setEditMaterial] = useRecoilState(editState);
  const workerId = useRecoilValue(workerState)?.id;
  const date = useRecoilValue(dateState);
  const dateString = date?.toISOString() || "";

  const { data: response, isLoading } = useQuery(
    ["finalized-services", workerId, dateString],
    () => getFinalizedServices(workerId || 1, dateString),
    { enabled: !!dateString && !!workerId }
  );
  const finalizedServices = response?.data;
  const noResults = !finalizedServices || isEmpty(finalizedServices);

  const { data: materialsData } = useQuery(
    ["used-materials"],
    () => getUsedMaterials(finalizedServices?.map((a) => a.id)),
    { enabled: !!finalizedServices }
  );

  const getAllUsedMaterials = useCallback(() => {
    const res: UsedMaterial[] = [];
    if (materialsData) {
      Object.keys(materialsData).forEach((key) =>
        res.push(...materialsData[key])
      );
    }
    return res;
  }, [materialsData]);

  const onChange = () => {
    queryClient.invalidateQueries("materials");
    setShowForm(false);
    setEditMaterial(null);
  };

  if (isLoading) {
    return null;
  }

  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>Izvestaj</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <Header />
          <Box sx={{ m: 2 }}>
            {noResults ? (
              <EmptyState />
            ) : (
              <Grid container columnSpacing={2}>
                <Grid item xs>
                  <ReportTable finalizedServices={finalizedServices} />
                </Grid>
                <Grid item sx={{ width: 300 }}>
                  <Paper sx={{ p: 2 }}>
                    <Summary
                      finalizedServices={finalizedServices}
                      usedMaterials={getAllUsedMaterials()}
                    />
                  </Paper>
                </Grid>
              </Grid>
            )}
          </Box>
        </main>
      </div>

      <Drawer
        anchor="right"
        open={showForm || !!editMaterial}
        classes={{ paper: styles.userDrawer }}
        onClose={() => {
          setShowForm(false);
          setEditMaterial(null);
        }}
      >
        <MaterialForm onChange={onChange} />
      </Drawer>
    </>
  );
};

export default Report;
